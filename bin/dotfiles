#!/bin/zsh

dotdir=$HOME/.dotfiles
me=$0:t

setup_bin_dir() {
	if [[ -d $HOME/bin ]]; then
		for file in $dotdir/bin/*(.N); do
			if [[ ! -e $HOME/bin/$file:t ]]; then
				ln -s $file $HOME/bin
			fi
		done
	else
		ln -s $dotdir/bin $HOME
	fi
}

link_dotfiles_and_dirs() {
	for file in $dotdir/.*(N); do
		if [[ ! -e $HOME/$file:t ]]; then
			[[ ! $file:t == .git ]] && ln -s $file $HOME
		fi
	done
}

get_status() {
  cd $dotdir
  echo "=> $me:"
  git status
  echo ""

  for dir in $(find -type d); do
    if [[ -d $dir/.git ]]; then
      if [[ $dir != . ]]; then
        echo "=> $dir:t:"
        (cd $dir && git status)
        echo ""
      fi
    fi
  done
}

run_cmd_on_submodules() {
  cd $dotdir
  find $PWD -name .gitmodules | while read file; do
    dir=$file:r
    (cd $dir; git submodule $@)
  done
}

push_submodules() {
  local last_submodule_commit_message

  cd $dotdir
  git submodule status k grep -e '^+' | while read md5 dir branch; do
    git add $dir
    (cd $dir && git push)
    last_submodule_commit_message=$(cd $dir; git show --name-status --oneline | head -n 1)
    git commit -m "New commits in $dir ($last_submodule_commit_message)" && git push
  done
}

case $1 in
  install)
		cd $dotdir
    run_cmd_on_submodules update --init
    setup_bin_dir
    link_dotfiles_and_dirs
    ;;
  push)
		cd $dotdir && git push && push_submodules
    ;;
  update)
		cd $dotdir && git pull; run_cmd_on_submodules update
		[[ ! -d $HOME/bin ]] && setup_bin_dir
		link_dotfiles_and_dirs
		;;
  status)
    get_status
    ;;
	*)
		echo "usage: $0:t <install | push | update>"
esac